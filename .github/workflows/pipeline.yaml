name: Pipeline

on:
  push:

jobs:
  versioning:
    runs-on:
      labels: self-hosted
    name: Versioning
    permissions:
      contents: write
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
      - name: Get current version
        id: get_version
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        run: |
          develop=$(git describe --tags $(git rev-list --tags --max-count=1)) # gets the latest tag on all branches
          if [[ ${{ github.ref_name }} == 'main' ]]; then
            latest=$develop
          else
            latest=$(git describe --tags --exact-match --abbrev=0)
          fi

          echo "LATEST=$latest" >> $GITHUB_OUTPUT
          echo "DEVELOP=$develop" >> $GITHUB_OUTPUT

          echo Release version: $latest
          echo Develop version: $develop
      - name: Set new version
        id: set_version
        run: |
          if ! [[ '${{ github.ref_name }}' == 'main' ]] && ! [[ '${{ github.ref_name }}' == 'develop' ]]; then
            echo "Not on main or develop"
            hash=$(echo ${{ github.sha }} | cut -c1-7)
            version=$(echo "${{ github.ref_name }}-$hash" | sed 's/\//-/g')
            echo "VERSION=$version" >> $GITHUB_OUTPUT
            echo "Using $version as the version"
          else
            latest=${{ steps.get_version.outputs.LATEST }}
            latest_minor=$(echo $latest | awk -F. '{print $2}')
            latest_patch=$(echo $latest | awk -F. '{print $3}')

            develop=${{ steps.get_version.outputs.DEVELOP }}
            develop_major=$(echo $develop | awk -F. '{print $1}' | cut -d'v' -f2)
            develop_minor=$(echo $develop | awk -F. '{print $2}')
            develop_patch=$(echo $develop | awk -F. '{print $3}' | cut -d'-' -f1)


            if [[ ${{ github.ref_name }} == 'develop' ]]; then
              if [[ ${{ vars.MAJOR_VERSION }} != $develop_major ]]; then
                version=v$((develop_major + 1)).0.0-dev
              elif [[ $(echo $develop | cut -d'-' -f1) == $latest ]]; then
                version=v$develop_major.$((develop_minor + 1)).0-dev
              else
                version=v$develop_major.$develop_minor.$((develop_patch + 1))-dev
              fi
            else
              version=$(echo $develop | cut -d'-' -f1)
            fi

            echo "VERSION=$version" >> $GITHUB_OUTPUT
            echo "Using $version as the version"
          fi
      - name: Checkout develop
        if: github.ref_name == 'develop'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push tag
        if: github.ref_name == 'main' || github.ref_name == 'develop'
        run: |
          git tag ${{ steps.set_version.outputs.VERSION }}
          git push --tags
  build:
    needs: versioning
    env:
      FILE_HEADER: |
        /*
        Theme Name: Hüttenbau Oberi Theme
        Theme URI: https://github.com/Nevah5/huettenbau-oberi-theme
        Author: Noah Geeler
        Author URI: https://noah.geeler.net
        Description: Hüttenbau Oberi Theme
        Version: ${{ needs.versioning.outputs.VERSION }}
        License: GNU General Public License v3
        License URI: <https://www.gnu.org/licenses/gpl-3.0.html>
        Text Domain: huettenbau-oberi-theme
        Tags: huettenbau-oberi
        */
    name: Build Theme
    runs-on:
      labels: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Setup dependencies
        run: |
          npm install -g sass
      - name: Compile SCSS
        run: |
          sass style.scss --no-source-map -q > style.css
      - name: Add header to style.css
        run: |
          echo '${{ env.FILE_HEADER }}' | cat - style.css > temp && mv temp style.css
      - name: Delete unwanted source files
        run: |
          find . -type f -name "*.afdesign" -exec rm -f {} \;
      - name: Prepare ZIP
        run: |
          mkdir build
          cp *.css build/
          cp *.php build/
          cp *.js build/
          cp screenshot.png build/
          cp assets/ build/ -r
          cp LICENSE build/
      - name: Generate artifact name
        id: generate_artifact_name
        run: |
          artifact_name=huettenbau-oberi-theme
          if [[ ${{ github.ref_name }} != 'main' ]] && [[ ${{ github.ref_name }} != 'develop' ]]; then
            artifact_name=$artifact_name-${{ needs.versioning.outputs.VERSION }}
          fi
          echo "name=$artifact_name" >> $GITHUB_OUTPUT
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate_artifact_name.outputs.name }}
          retention-days: 1
          path: build/*
  release:
    if: github.ref_name == 'main' || github.ref_name == 'develop'
    name: GitHub Release
    needs:
      - build
      - versioning
    permissions:
      contents: write
    runs-on:
      labels: self-hosted
    steps:
      - name: Setup tmp directory
        run: |
          mkdir tmp
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: huettenbau-oberi-theme
          path: tmp
      - name: debug
        run: |
          cd tmp
          ls -la
      - name: Create zip
        run: |
          cd tmp
          zip -r huettenbau-oberi-theme.zip .
          mv huettenbau-oberi-theme.zip ..
          cd ..
      - name: Clean up tmp directory
        run: |
          rm -rf tmp
      - uses: ncipollo/release-action@v1
        with:
          name: Version ${{ needs.versioning.outputs.VERSION }}
          tag: ${{ needs.versioning.outputs.VERSION }}
          prerelease: ${{ github.ref_name == 'develop' }}
          artifacts: "huettenbau-oberi-theme.zip"
          generateReleaseNotes: true
          makeLatest: true
